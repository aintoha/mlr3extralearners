on:
  push:
    branches: master
  pull_request:
    branches: master
  schedule:
    - cron: "0 4 * * *"

name: R CMD Check

jobs:
  all:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - { os: ubuntu-latest, r: "release" }

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      CRAN: ${{ matrix.config.cran }}
      TIC_DEPLOY_KEY: ${{ secrets.TIC_DEPLOY_KEY }}
      RGL_USE_NULL: true
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v2.1.1

      - uses: r-lib/actions/setup-r@master
        with:
          r-version: ${{ matrix.config.r }}
          Ncpus: 4

      - uses: r-lib/actions/setup-tinytex@master
        if: matrix.config.latex == 'true'

      - uses: r-lib/actions/setup-pandoc@master

      - name: "[Cache] Prepare daily timestamp for cache"
        if: runner.os != 'Windows'
        id: date
        run: echo "::set-output name=date::$(date '+%d-%m')"

      - name: "[Cache] Cache R packages"
        if: runner.os != 'Windows'
        uses: pat-s/always-upload-cache@v2.0.0
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-r-${{ matrix.config.r }}-${{steps.date.outputs.date}}
          restore-keys: ${{ runner.os }}-r-${{ matrix.config.r }}-${{steps.date.outputs.date}}

      - name: "[Stage] Prepare"
        run: |
          Rscript -e "if (!requireNamespace('remotes')) install.packages('remotes', type = 'source')"
          Rscript -e "if (getRversion() < '3.2' && !requireNamespace('curl')) install.packages('curl', type = 'source')"

      - name: "[Stage] [Linux] Install curl"
        if: runner.os == 'Linux'
        run: |
          sudo R CMD javareconf
          sudo apt install ccache libcurl4-openssl-dev libgit2-dev
          mkdir -p ~/.R && echo -e 'CXX_STD = CXX14\n\nCC=ccache gcc -std=gnu99\nCXX=ccache g++\nCXX11=ccache g++ -std=gnu99\nCXX14=ccache g++ -std=gnu99\nC11=ccache g++\nC14=ccache g++\nFC=ccache gfortran\nF77=ccache gfortran' > $HOME/.R/Makevars
        
      - name: "[Custom block] [Stage] [Linux] Install pkgdown system lib req"
        if: runner.os == 'Linux'
        run: sudo apt install libharfbuzz-dev libfribidi-dev

      - name: "[Stage] Install"
        if: matrix.config.os != 'macOS-latest' || matrix.config.r != 'devel'
        run: Rscript -e "remotes::install_github('ropensci/tic')" -e "print(tic::dsl_load())" -e "tic::prepare_all_stages()" -e "tic::before_install()" -e "tic::install()"

      # macOS devel needs its own stage because we need to work with an option to suppress the usage of binaries
      - name: "[Stage] Prepare & Install (macOS-devel)"
        if: matrix.config.os == 'macOS-latest' && matrix.config.r == 'devel'
        run: |
          echo -e 'options(Ncpus = 4, pkgType = "source", repos = structure(c(CRAN = "https://cloud.r-project.org/")))' > $HOME/.Rprofile
          Rscript -e "remotes::install_github('ropensci/tic')" -e "print(tic::dsl_load())" -e "tic::prepare_all_stages()" -e "tic::before_install()" -e "tic::install()"

      - name: Install Python
        run: |
          Rscript -e "remotes::install_github('rstudio/reticulate')" -e "reticulate::install_miniconda()" -e "remotes::install_local()" -e "install.packages('keras')" -e "keras::install_keras(tensorflow = '2.0.1', extra_packages = c('IPython', 'requests', 'certifi', 'urllib3', 'tensorflow-hub', 'tabnet==0.1.4.1'))" -e  "reticulate::py_install(c('torch', 'pycox'), pip = TRUE)"

      - name: "[Stage] Script"
        run: Rscript -e 'tic::script()'

      - name: "[Stage] After Success"
        run: Rscript -e "tic::after_success()"

      - name: "[Stage] Upload R CMD check artifacts"
        if: failure()
        uses: actions/upload-artifact@master
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check
     
      - name: "[Stage] Update learner table"
        if: ${{ github.event_name != 'pull_request'}}
        run: |
          R CMD INSTALL .
          Rscript build_learner_table.R

      - name: Commit files
        if: ${{ github.event_name != 'pull_request'}}
        run: |
          git add R/sysdata.rda
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git diff-index --quiet HEAD || git commit -m "Update learner table"

      - name: Push changes
        if: ${{ github.event_name != 'pull_request'}}
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: "[Stage] Before Deploy"
        if: ${{ github.event_name != 'pull_request'}}
        run: |
          Rscript -e "tic::before_deploy()"

      - name: "[Stage] Deploy"
        if: ${{ github.event_name != 'pull_request'}}
        run: Rscript -e "tic::deploy()"

      - name: "[Stage] After Deploy"
        if: ${{ github.event_name != 'pull_request'}}
        run: Rscript -e "tic::after_deploy()"
